(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendPost = void 0;
const EmailJSResponseStatus_1 = require("../models/EmailJSResponseStatus");
const store_1 = require("../store/store");
const sendPost = (url, data, headers = {}) => {
    return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.addEventListener('load', ({ target }) => {
            const responseStatus = new EmailJSResponseStatus_1.EmailJSResponseStatus(target);
            if (responseStatus.status === 200 || responseStatus.text === 'OK') {
                resolve(responseStatus);
            }
            else {
                reject(responseStatus);
            }
        });
        xhr.addEventListener('error', ({ target }) => {
            reject(new EmailJSResponseStatus_1.EmailJSResponseStatus(target));
        });
        xhr.open('POST', store_1.store._origin + url, true);
        Object.keys(headers).forEach((key) => {
            xhr.setRequestHeader(key, headers[key]);
        });
        xhr.send(data);
    });
};
exports.sendPost = sendPost;

},{"../models/EmailJSResponseStatus":6,"../store/store":7}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendForm = exports.send = exports.init = void 0;
const init_1 = require("./methods/init/init");
Object.defineProperty(exports, "init", { enumerable: true, get: function () { return init_1.init; } });
const send_1 = require("./methods/send/send");
Object.defineProperty(exports, "send", { enumerable: true, get: function () { return send_1.send; } });
const sendForm_1 = require("./methods/sendForm/sendForm");
Object.defineProperty(exports, "sendForm", { enumerable: true, get: function () { return sendForm_1.sendForm; } });
exports.default = {
    init: init_1.init,
    send: send_1.send,
    sendForm: sendForm_1.sendForm,
};

},{"./methods/init/init":3,"./methods/send/send":4,"./methods/sendForm/sendForm":5}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
const store_1 = require("../../store/store");
/**
 * Initiation
 * @param {string} userID - set the EmailJS user ID
 * @param {string} origin - set the EmailJS origin
 */
const init = (userID, origin = 'https://api.emailjs.com') => {
    store_1.store._userID = userID;
    store_1.store._origin = origin;
};
exports.init = init;

},{"../../store/store":7}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.send = void 0;
const store_1 = require("../../store/store");
const validateParams_1 = require("../../utils/validateParams");
const sendPost_1 = require("../../api/sendPost");
/**
 * Send a template to the specific EmailJS service
 * @param {string} serviceID - the EmailJS service ID
 * @param {string} templateID - the EmailJS template ID
 * @param {object} templatePrams - the template params, what will be set to the EmailJS template
 * @param {string} userID - the EmailJS user ID
 * @returns {Promise<EmailJSResponseStatus>}
 */
const send = (serviceID, templateID, templatePrams, userID) => {
    const uID = userID || store_1.store._userID;
    validateParams_1.validateParams(uID, serviceID, templateID);
    const params = {
        lib_version: '3.2.0',
        user_id: uID,
        service_id: serviceID,
        template_id: templateID,
        template_params: templatePrams,
    };
    return sendPost_1.sendPost('/api/v1.0/email/send', JSON.stringify(params), {
        'Content-type': 'application/json',
    });
};
exports.send = send;

},{"../../api/sendPost":1,"../../store/store":7,"../../utils/validateParams":8}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendForm = void 0;
const store_1 = require("../../store/store");
const validateParams_1 = require("../../utils/validateParams");
const sendPost_1 = require("../../api/sendPost");
const findHTMLForm = (form) => {
    let currentForm;
    if (typeof form === 'string') {
        currentForm = document.querySelector(form);
    }
    else {
        currentForm = form;
    }
    if (!currentForm || currentForm.nodeName !== 'FORM') {
        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';
    }
    return currentForm;
};
/**
 * Send a form the specific EmailJS service
 * @param {string} serviceID - the EmailJS service ID
 * @param {string} templateID - the EmailJS template ID
 * @param {string | HTMLFormElement} form - the form element or selector
 * @param {string} userID - the EmailJS user ID
 * @returns {Promise<EmailJSResponseStatus>}
 */
const sendForm = (serviceID, templateID, form, userID) => {
    const uID = userID || store_1.store._userID;
    const currentForm = findHTMLForm(form);
    validateParams_1.validateParams(uID, serviceID, templateID);
    const formData = new FormData(currentForm);
    formData.append('lib_version', '3.2.0');
    formData.append('service_id', serviceID);
    formData.append('template_id', templateID);
    formData.append('user_id', uID);
    return sendPost_1.sendPost('/api/v1.0/email/send-form', formData);
};
exports.sendForm = sendForm;

},{"../../api/sendPost":1,"../../store/store":7,"../../utils/validateParams":8}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailJSResponseStatus = void 0;
class EmailJSResponseStatus {
    constructor(httpResponse) {
        this.status = httpResponse.status;
        this.text = httpResponse.responseText;
    }
}
exports.EmailJSResponseStatus = EmailJSResponseStatus;

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.store = void 0;
exports.store = {
    _origin: 'https://api.emailjs.com',
};

},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateParams = void 0;
const validateParams = (userID, serviceID, templateID) => {
    if (!userID) {
        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';
    }
    if (!serviceID) {
        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';
    }
    if (!templateID) {
        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';
    }
    return true;
};
exports.validateParams = validateParams;

},{}],9:[function(require,module,exports){
"use strict";

var _iosVhFix = require("./utils/ios-vh-fix");
var _initAccordion = require("./modules/accordion/init-accordion");
var _emailjsCom = _interopRequireDefault(require("emailjs-com"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  (0, _initAccordion.initAccordions)();
  (0, _iosVhFix.iosVhFix)();
  var nameInput = document.getElementById('name');
  var phoneInput = document.getElementById('phone');
  var agreementCheckbox = document.querySelector('input[name="agreement"]');
  var submitButton = document.querySelector('.button-form');
  function checkFormValidity() {
    if (nameInput.value !== '' && phoneInput.value !== '' && agreementCheckbox.checked) {
      submitButton.classList.remove('disabled-button');
    } else {
      submitButton.classList.add('disabled-button');
    }
  }
  if (nameInput) {
    nameInput.addEventListener('input', checkFormValidity);
  }
  if (phoneInput) {
    phoneInput.addEventListener('input', checkFormValidity);
  }
  if (agreementCheckbox) {
    agreementCheckbox.addEventListener('change', checkFormValidity);
  }
  var scrollToSection = function scrollToSection(link, section) {
    if (link) {
      link.addEventListener('click', function (e) {
        e.preventDefault();
        section.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
        document.getElementById('sidebar').classList.remove('active');
        document.querySelector('.wrapper').classList.remove('dark');
      });
    }
  };
  _emailjsCom.default.init('CMQisLDrpcIk54EvP');
  function sendEmail(event) {
    event.preventDefault();
    var form = event.target;
    var formData = new FormData(form);
    var templateParams = {
      from_name: formData.get('name'),
      from_phone: formData.get('phone')
    };
    _emailjsCom.default.send('service_kg6bi8v', 'template_u70e3xm', templateParams).then(function (response) {
      console.log('Email sent successfully!', response.status, response.text);
      form.reset();
      document.querySelector('.form__wrapper--default').style.height = '0';
      document.querySelector('.form__wrapper--default').style.opacity = '0';
      document.querySelector('.form__wrapper--default').style.transition = 'all 0.5s';
      document.querySelector('.form__wrapper--success').classList.remove('visually-hidden');
    }, function (error) {
      console.log('Error sending email:', error);
    });
  }
  if (document.getElementById('my-form')) {
    document.getElementById('my-form').addEventListener('submit', sendEmail);
  }
  var forms = document.querySelector('#form');
  var vacancies = document.querySelector('#vacancies');
  var extra = document.querySelector('#extra');
  var contacts = document.querySelector('#contacts');
  var product1 = document.querySelector('#type-1');
  var map = document.querySelector('#map-contact');
  var formLinks = document.querySelectorAll("a[href=\"#form\"]");
  formLinks.forEach(function (i) {
    scrollToSection(i, forms);
  });
  scrollToSection(document.querySelector('a[href="#vacancies"]'), vacancies);
  scrollToSection(document.querySelector('a[href="#extra"]'), extra);
  scrollToSection(document.querySelector('a[href="#contacts"]'), contacts);
  scrollToSection(document.querySelector('a[href="#type-1"]'), product1);
  scrollToSection(document.querySelector('a[href="#map-contact"]'), map);
  function equalizeHeights() {
    var items = document.querySelectorAll('.products__item');
    var maxHeaderHeight = 0;
    var maxItemHeight = 0;
    items.forEach(function (item) {
      var header = item.querySelector('h2');
      header.style.height = 'auto';
      item.style.height = 'auto';
    });
    items.forEach(function (item) {
      var header = item.querySelector('h2');
      header.style.height = 'auto';
      item.style.height = 'auto';
      var headerHeight = header.offsetHeight;
      var itemHeight = item.offsetHeight;
      maxHeaderHeight = Math.max(maxHeaderHeight, headerHeight);
      maxItemHeight = Math.max(maxItemHeight, itemHeight);
    });
    items.forEach(function (item) {
      var header = item.querySelector('h2');
      header.style.height = "".concat(maxHeaderHeight, "px");
      item.style.height = "".concat(maxItemHeight, "px");
    });
  }
  window.addEventListener('load', equalizeHeights);
  window.addEventListener('resize', equalizeHeights);
  var navigation = document.querySelector('.main-header__navigation');
  function clickOutside() {
    document.addEventListener('click', function (event) {
      var sidebar = document.getElementById('sidebar');
      var isClickInside = sidebar.contains(event.target);
      var isIgnoredElement = Array.from(document.querySelectorAll('button, a, input, textarea, select')).some(function (el) {
        return el.contains(event.target);
      });
      if (navigation) {
        if (!isClickInside && !isIgnoredElement && navigation.classList.contains('active')) {
          navigation.classList.remove('active');
          document.querySelector('.wrapper').classList.remove('dark');
        }
      }
    });
  }
  if (navigation) {
    clickOutside();
    if (navigation.classList.contains('active')) {
      clickOutside();
    }
  }
});

},{"./modules/accordion/init-accordion":11,"./utils/ios-vh-fix":13,"emailjs-com":2}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accordions = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Accordions = exports.Accordions = /*#__PURE__*/function () {
  function Accordions() {
    _classCallCheck(this, Accordions);
    this._openHeight = 0;
    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._windowResizeHandler = this._windowResizeHandler.bind(this);
    this._init();
  }
  _createClass(Accordions, [{
    key: "_init",
    value: function _init() {
      this.fullUpdate();
      document.addEventListener('click', this._documentClickHandler);
      window.addEventListener('resize', this._windowResizeHandler);
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-accordion="button"]')) {
        return;
      }
      evt.preventDefault();
      var parent = target.closest('[data-accordion="parent"]');
      if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
        return;
      }
      var element = target.closest('[data-accordion="element"]');
      if (element.classList.contains('is-active')) {
        this.closeAccordion(element);
        return;
      }
      this.openAccordion(element);
    }
  }, {
    key: "_windowResizeHandler",
    value: function _windowResizeHandler() {
      if (this._windowWidth === window.innerWidth) {
        return;
      }
      this._windowWidth = window.innerWidth;
      this.updateAccordionsHeight();
    }
  }, {
    key: "closeAllAccordion",
    value: function closeAllAccordion(parent) {
      var _this = this;
      var elements = parent.querySelectorAll('[data-accordion="element"]');
      elements.forEach(function (element) {
        var currentParent = element.closest('[data-accordion="parent"]');
        if (currentParent === parent) {
          _this.closeAccordion(element);
        }
      });
    }
  }, {
    key: "updateAccordionsHeight",
    value: function updateAccordionsHeight() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (element) {
        var content = element.querySelector('[data-accordion="content"]');
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
        return;
      }
      var closeElements = document.querySelectorAll('[data-accordion="element"]:not(.is-active)');
      closeElements.forEach(function (closeElement) {
        var parent = closeElement.closest('[data-accordion="parent"]');
        var content = closeElement.querySelector('[data-accordion="content"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.maxHeight = null;
      });
      var openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      openElements.forEach(function (openElement) {
        var content = openElement.querySelector('[data-accordion="content"]');
        var parent = openElement.closest('[data-accordion="parent"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
      });
    }
  }, {
    key: "fullUpdate",
    value: function fullUpdate() {
      var _this2 = this;
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var openElements;
      if (parent) {
        openElements = parent.querySelectorAll('[data-accordion="element"].is-active');
      } else {
        openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      }
      openElements.forEach(function (openElement) {
        var innerParent = openElement.querySelector('[data-accordion="parent"]');
        if (innerParent) {
          return;
        }
        _this2.openAccordion(openElement, transition);
      });
      this.updateAccordionsHeight();
    }
  }, {
    key: "openAccordion",
    value: function openAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var parentElement = element.closest('[data-accordion="parent"]');
      var contentElement = element.querySelector('[data-accordion="content"]');
      this._openHeight += contentElement.scrollHeight;
      if (parentElement.hasAttribute('data-single')) {
        this.closeAllAccordion(parentElement);
      }
      element.classList.add('is-active');
      if (transition) {
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
      if (parentElement.closest('[data-accordion="element"]')) {
        this.openAccordion(parentElement.closest('[data-accordion="element"]'), transition);
        return;
      }
      this._openHeight = 0;
    }
  }, {
    key: "closeAccordion",
    value: function closeAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var contentElement = element.querySelector('[data-accordion="content"]');
      if (!contentElement) {
        return;
      }
      element.classList.remove('is-active');
      if (transition) {
        contentElement.style.maxHeight = '0';
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = '0';
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
    }
  }]);
  return Accordions;
}();

},{}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initAccordions = exports.accordions = void 0;
var _accordions = require("./accordions");
var accordions;
var initAccordions = exports.initAccordions = function initAccordions() {
  exports.accordions = accordions = new _accordions.Accordions();
  window.accordions = accordions;
};

},{"./accordions":10}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosChecker = void 0;
var iosChecker = exports.iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

},{}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosVhFix = void 0;
var _iosChecker = require("./ios-checker");
var iosVhFix = exports.iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if ((0, _iosChecker.iosChecker)()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};

},{"./ios-checker":12}]},{},[9])


//# sourceMappingURL=main.min.js.map
